# Copyright (C) 2007,2008,2009,2010,2011 Olaf Lenz, Axel Arnold
#
# This file is part of ESPResSo.
#
# ESPResSo is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ESPResSo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# List headers that are not used by the program here

noinst_HEADERS = \
	myconfig-default.h

# List the sources of the Espresso binary here
libEspresso_core_la_SOURCES = \
	adresso.c adresso.h \
	angle.h \
	angledist.h \
	bin.c bin.h \
	binary_file.c binary_file.h \
	blockfile.c blockfile.h \
	bmhtf-nacl.h \
	buckingham.h \
	cells.c cells.h \
	communication.c communication.h \
	comfixed.h \
	comforce.h \
	config.c config.h \
	constraint.c constraint.h \
	debug.c debug.h \
	debye_hueckel.h \
	dihedral.h \
	domain_decomposition.c domain_decomposition.h \
	dpd.c dpd.h \
	elc.c elc.h \
	endangledist.h \
	energy.c energy.h \
	errorhandling.c	errorhandling.h \
	ewald.c ewald.h \
	fene.h \
	fft.c fft.h \
	fft-common.c fft-common.h \
	fft-dipolar.c fft-dipolar.h \
	forces.c forces.h \
	gb.h \
	ghosts.c ghosts.h \
	global.h \
	grid.c grid.h \
	halo.c halo.h \
	harmonic.h \
	hertzian.h \
	iccp3m.c iccp3m.h \
	imd.c imd.h \
	initialize.c initialize.h \
	integrate.c integrate.h \
	interaction_data.c interaction_data.h\
	lattice.c lattice.h \
	layered.c layered.h \
	lb.c lb.h \
	lb-boundaries.c lb-boundaries.h \
	lb-d3q18.h lb-d3q19.h \
	lbgpu_cfile.c \
	lj.c lj.h \
	ljangle.c ljangle.h \
	ljcos.c ljcos.h \
	ljcos2.c ljcos2.h \
	ljgen.c ljgen.h \
	magnetic_non_p3m_methods.c magnetic_non_p3m_methods.h \
	mdlc_correction.c  mdlc_correction.h \
	maggs.c maggs.h \
	metadynamics.c metadynamics.h \
	mmm1d.c mmm1d.h \
	mmm2d.c	mmm2d.h \
	mmm-common.c mmm-common.h \
	modes.c	modes.h \
	molforces.c molforces.h \
	mol_cut.h \
	morse.h \
	nemd.c nemd.h \
  npt.h \
	nsquare.c nsquare.h \
	overlap.h \
	p3m.c p3m.h \
	p3m-common.c p3m-common.h \
	p3m-dipolar.c p3m-dipolar.h \
	parser.c parser.h \
	particle_data.c	particle_data.h \
	polymer.c polymer.h \
	polynom.h \
	pressure.c pressure.h \
	pwdist.h \
	random.c random.h \
	rattle.c rattle.h \
	reaction_field.h \
	rotation.c rotation.h \
	soft_sphere.h \
	specfunc.c specfunc.h \
	statistics.c statistics.h \
	statistics_chain.c statistics_chain.h \
	statistics_cluster.c statistics_cluster.h \
	statistics_fluid.c statistics_fluid.h \
	statistics_molecule.c statistics_molecule.h \
	steppot.h \
	subt_lj.h \
	tab.h \
	thermostat.c thermostat.h \
	topology.c topology.h  \
	tunable_slip.h \
	tuning.c tuning.h \
	utils.c utils.h \
	uwerr.c	uwerr.h \
	verlet.c verlet.h \
	virtual_sites.c virtual_sites.h \
	virtual_sites_com.c virtual_sites_com.h \
	virtual_sites_relative.c virtual_sites_relative.h \
	vmdsock.c vmdsock.h

libEspresso_core_la_SOURCES+= \
	tcl/adresso_tcl.c tcl/adresso_tcl.h \
	tcl/bin_tcl.c tcl/bin_tcl.h \
	tcl/binary_file_tcl.c tcl/binary_file_tcl.h \
	tcl/blockfile_tcl.c tcl/blockfile_tcl.h \
	tcl/cells_tcl.c tcl/cells_tcl.h \
	tcl/constraint_tcl.c tcl/constraint_tcl.h \
	tcl/cuda_init_tcl.h \
	tcl/domain_decomposition_tcl.c tcl/domain_decomposition_tcl.h \
	tcl/dpd_tcl.c tcl/dpd_tcl.h \
	tcl/global_tcl.c tcl/global_tcl.h \
	tcl/grid_tcl.c tcl/grid_tcl.h \
	tcl/iccp3m_tcl.c tcl/iccp3m_tcl.h \
	tcl/imd_tcl.c tcl/imd_tcl.h \
	tcl/initialize_interpreter.h tcl/initialize_interpreter.c \
	tcl/integrate_tcl.c tcl/integrate_tcl.h \
	tcl/interaction_data_tcl.c tcl/interaction_data_tcl.h \
	tcl/lb-boundaries_tcl.c tcl/lb-boundaries_tcl.h \
	tcl/lb_tcl.c tcl/lb_tcl.h \
	tcl/lj_tcl.c tcl/lj_tcl.h \
	tcl/ljangle_tcl.c tcl/ljangle_tcl.h \
	tcl/ljcos2_tcl.c tcl/ljcos2_tcl.h \
	tcl/ljcos_tcl.c tcl/ljcos_tcl.h \
	tcl/ljgen_tcl.c tcl/ljgen_tcl.h \
	tcl/magnetic_non_p3m_methods_tcl.c tcl/magnetic_non_p3m_methods_tcl.h \
	tcl/maggs_tcl.c tcl/maggs_tcl.h \
	tcl/mmm1d_tcl.c tcl/mmm1d_tcl.h \
	tcl/mmm2d_tcl.c tcl/mmm2d_tcl.h \
	tcl/morse_tcl.c tcl/morse_tcl.h \
	tcl/nemd_tcl.c tcl/nemd_tcl.h\
	tcl/p3m-dipolar_tcl.c tcl/p3m-dipolar_tcl.h \
	tcl/p3m_tcl.c tcl/p3m_tcl.h \
	tcl/particle_data_tcl.c tcl/particle_data_tcl.h \
	tcl/polymer_tcl.c tcl/polymer_tcl.h \
	tcl/pressure_tcl.c tcl/pressure_tcl.h \
	tcl/random_tcl.c tcl/random_tcl.h \
	tcl/statistics_chain_tcl.c tcl/statistics_chain_tcl.h \
	tcl/statistics_cluster_tcl.c tcl/statistics_cluster_tcl.h \
	tcl/statistics_fluid_tcl.c tcl/statistics_fluid_tcl.h \
	tcl/statistics_tcl.c tcl/statistics_tcl.h \
	tcl/thermostat_tcl.c tcl/thermostat_tcl.h \
	tcl/tab_tcl.c tcl/tab_tcl.h \
	tcl/topology_tcl.c tcl/topology_tcl.h \
	tcl/uwerr_tcl.c tcl/uwerr_tcl.h \
	tcl/virtual_sites_com_tcl.c tcl/virtual_sites_com_tcl.h


#################################################################
# Build the blockfile library
#################################################################
libespressobf_a_SOURCES = blockfile.c blockfile.h
libespressobf_a_CPPFLAGS = -DBLOCKFILE_STDIO

lib_LIBRARIES = libespressobf.a 
lib_LTLIBRARIES = libEspresso_core.la libespresso_main.la
# pyexecdir_LTLIBRARIES = libespresso_main.la
# All objects are compiled into the library
# noinst_LTLIBRARIES = libEspresso.la

libespresso_main_la_CPPFLAGS = -D 'ESPRESSO_SCRIPTS_DEFAULT="$(buildscriptsdir)"'
libespresso_main_la_SOURCES = scriptsdir.c errexit.c dummy.c
libespresso_main_la_LIBADD = libEspresso_core.la
libEspresso_core_la_LIBADD = 

#################################################################
# Handling of myconfig.h
#################################################################
FORCE:
myconfig-final.h: FORCE
	config_files="\
	  $(top_builddir)/$(myconfig) \
	  $(top_srcdir)/$(myconfig)"; \
	if test $(myconfig) = myconfig.h; then \
	  config_files="$$config_files $(top_srcdir)/src/myconfig-default.h"; \
	fi; \
	for file in $$config_files; do \
	  if test -e $$file; then \
	    myconfig_found=1; \
	    if test -e $@; then \
	      cmp -s $$file $@ || cp $$file $@; \
	    else \
	       cp $$file $@; \
	    fi; \
	    break; \
	  fi; \
	done; \
	if test ! $$myconfig_found; then \
	  echo "ERROR: Couldn't find $(myconfig) anywhere"; \
	  exit 1; \
	fi

BUILT_SOURCES = myconfig-final.h

CLEANFILES = myconfig-final.h

#################################################################
# Handling of the MPI fake implementation
#################################################################
if MPI_FAKE
libEspresso_core_la_SOURCES += mpifake/mpi.h mpifake/mpi.c
# mpifake should come before any system includes
AM_CPPFLAGS = -I$(srcdir)/mpifake
endif

##################################################
# CUDA rules
##################################################
if CUDA
SUFFIXES=.cu
.cu.o:
	$(NVCC) -c $(NVCCFLAGS) $(DEFAULT_INCLUDES) $(CPPFLAGS) $(INCLUDES) $(DEFS) -o $@ $< 

#.cu.lo:
#	$(LIBTOOL) --tag=CC --mode=compile $(NVCC) -c "-Xcompiler -fPIC $(NVCC_FLAGS)" -o $@ $^ 

CUDA_OBJECTS= \
	cuda_init.o \
	lbgpu.o \
	tcl/cuda_init_tcl.o 

libEspresso_core_la_LIBADD += cuda_init.o lbgpu.o tcl/cuda_init_tcl.o 
endif
